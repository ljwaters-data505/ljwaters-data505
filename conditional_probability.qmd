---
title: "Conditional Probability"
author: "Landon Waters"
date: "02/17/2025"

format: 
  html:
    theme: spacelab  
    mainfont: verdana
    highlight-style: github
    title-block-banner: true
    embed-resources: true
---

**Abstract:**

This is a technical blog post of **both** an HTML file *and* [.qmd file](https://raw.githubusercontent.com/cd-public/D505/refs/heads/master/hws/src/cond.qmd) hosted on GitHub pages.

# 1. Setup

**Step Up Code:**

```{r}
sh <- suppressPackageStartupMessages
sh(library(tidyverse))
sh(library(caret))
sh(library(fastDummies))
sh(library(naivebayes))
sh(library(tidytext))
wine <- readRDS(gzcon(url("https://github.com/cd-public/D505/raw/master/dat/pinot.rds")))
```

# 2. Conditional Probability

Calculate the probability that a Pinot comes from Burgundy given it has the word 'fruit' in the description.

$$
P({\rm Burgundy}~|~{\rm Fruit})
$$

```{r}
# TODO
pfruit=sum(str_detect(wine$description, "[Ff]ruit")) / nrow(wine) 
intersect=sum(wine$province=="Burgundy" & 
              str_detect(wine$description, "[Ff]ruit")) / nrow(wine)

# Conditional Prob
paste("P(Burgundy | Fruit) = ", round(intersect/pfruit*100, digits = 2), "%",
      sep="")
```

# 3. Naive Bayes Algorithm

We train a naive bayes algorithm to classify a wine's province using:
1. An 80-20 train-test split.
2. Three features engineered from the description
3. 5-fold cross validation.

We report Kappa after using the model to predict provinces in the holdout sample.

```{r}
# TODO
set.seed(505)

wino <- wine %>% 
  mutate(cherry = str_detect(description,"cherry")) %>% 
  mutate(chocolate = str_detect(description,"chocolate")) %>%
  mutate(earth = str_detect(description,"earth")) %>%
  select(province, cherry, chocolate, earth)

wine_index <- createDataPartition(wino$province, p = 0.80, list = FALSE)
train <- wino[ wine_index, ]
test <- wino[-wine_index, ]

fit <- train(province ~ .,
             data = train, 
             method = "naive_bayes",
             metric = "Kappa",
             trControl = trainControl(method = "cv", number = 5))

confusionMatrix(predict(fit, test),factor(test$province))$overall["Kappa"] # not great
```


# 4. Frequency Differences

We find the three words that most distinguish New York Pinots from all other Pinots.

```{r message = FALSE}
# TODO
df <- wine %>%
  mutate(is_ny = ifelse(province == "New_York", "NY", "Other")) %>%
  unnest_tokens(word, description) %>% # tokenize
  anti_join(stop_words) %>% # remove stop words
  filter(!word %in% c("wine", "pinot")) %>%  # remove useless words
  count(is_ny, word) %>%  # count occurrences separately for NY and Other
  group_by(is_ny) %>%
  mutate(freq = n / sum(n)) %>%  # normalize frequencies (most only occur once)
  ungroup() %>%
  spread(is_ny, freq, fill = 0) %>%  # columns for NY vs Other 
  mutate(prob_diff = NY - Other) %>%  # probability difference b/w word occurrences
  arrange(desc(prob_diff))

# display three words that are most distinguished from other provinces
df %>% select(word, prob_diff) %>% head(3)
```